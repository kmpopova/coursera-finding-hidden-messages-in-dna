"""
Given a profile matrix Profile, we can evaluate the probability 
of every k-mer in a string Text and find a Profile-most probable 
k-mer in Text, i.e., a k-mer that was most likely to have been 
generated by Profile among all k-mers in Text. For example, 
ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT. 
Indeed, every other 12-mer in this string has probability 0. 
In general, if there are multiple Profile-most probable k-mers 
in Text, then we select the first such k-mer occurring in Text.

Profile-most Probable k-mer Problem: Find a Profile-most probable 
k-mer in a string.

Input: A string Text, an integer k, and a 4 Ã— k matrix Profile.
Output: A Profile-most probable k-mer in Text.
Code Challenge: Solve the Profile-most Probable k-mer Problem.

Debug Datasets

Sample Input:

ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
5
0.2 0.2 0.3 0.2 0.3
0.4 0.3 0.1 0.5 0.1
0.3 0.3 0.5 0.2 0.4
0.1 0.2 0.1 0.1 0.2

Sample Output:

CCGAG
"""

import numpy as np


# Process input into 3 pieces: string, k and values for matrix
# Rows in matrix: A: 0,  C: 1,  G: 2,  T: 3

def find_profile_most_probable_kmer(text: str, k: int, profile: np.array) -> str:
    
    alphabet = "ACGT"
    n = len(text)
    patterns = []
    max_score = 0

    for start_position in range(n-k+1):
        pattern = text[start_position:start_position+k]
        pattern_score = 0
        for i in range(k):
            letter = pattern[i]
            profile_row = alphabet.index(letter)
            profile_column = i

            pattern_score += profile[profile_row, profile_column]
        patterns.append((pattern, pattern_score))
        if pattern_score > max_score:
            max_score = pattern_score
    

    for (element, score) in patterns:
        if score == max_score:
            return element




if __name__ == "__main__":
    input_text = "TGGGTGCACCCTCCGCGGCGCTCACCCTTCGCTTGATCGTGTAATGTACAGCCGATTCCCTCCCCGGATACGTTAATCCCAAATGAACGGAGCTCTCTAGGAATTATCAAGTAAGTTCAGCTAGTGACCTTGGAGCGGGTCAAGCCGGCAATGTGCACGGGAAAAATCTTGGTCCCGACGGAACCTTGACAACCCTTGAAAGTGCGTCTTCACCACCCCTTACGTGTTAATGGGCCATTGTTATGGTGGCTGTTGTGCCAACTGTTTGTAATAGTTCGTGCGGCCATACCAGACGTCCCCACACCGAGAAGGTTGGTTCGGCTTCCGTTATATAAACCCACTTTTACACAAACCTGTCTCCGGAACATGCGATGGCTGTACTACGTCTACAAACCGGGGGGCAAAGCTCGCAGCTTCGCCATGTGATGCAAGCGCAAGTGGCCTCGGCTAGCAATTCTGCTCTGCGTAGAACCGCGATTGATTTGGAATATCGCATGGCAGCCGTATGGGTTGCATGAAGGGCGGAGCCTGTCATTGATCCGTGAGGCTGCGCCGAAAATAAGCAGATTTCGAGTGCCCGGATGCTAATCGCGAGGTACTATGCTATGAACAGTATAGCGTTACTATAGCGCCTATCCGATACCGCCTGGCCGTTGTAGCCAGAAAATATCGCCGCCTAAGCTACTTGTTTGAAAGATGCGACCGCCTCGAGAGATAAAAGTGTTGTGCGCTGAATGGTTAATCGGGAATGAGAGTTGTCCGGAGACCTCTCATAAGTAGGCTTCAGGAACCGGCGGAACGGCGCAATTACACTCCAGAATCACGACTCGTAAGGCTTGGGGTTCGAAATTGATCTCGAGCGGTGCGTCTTTGGGACATTGCAAGGCATACCCAATCTTTAATGCGAGTGGGCCTGAAGCCGCCCCCAGAAATAGGCGATGTAAGAACGTACCGTGACAAAGGTGCCGATAGCACGAAATCCGTCGTCAATAAAAAATTT"
    input_k = 15
    input_profile = np.array([[0.242,0.288,0.318,0.348,0.212,0.318,0.212,0.242,0.364,0.258,0.197,0.212,0.242,0.242,0.227],[0.303,0.212,0.152,0.227,0.227,0.197,0.167,0.212,0.273,0.288,0.182,0.182,0.273,0.348,0.288],[0.227,0.258,0.288,0.197,0.409,0.242,0.333,0.258,0.152,0.227,0.318,0.288,0.258,0.227,0.227],[0.227,0.242,0.242,0.227,0.152,0.242,0.288,0.288,0.212,0.227,0.303,0.318,0.227,0.182,0.258]])
    
    most_prob_kmer = find_profile_most_probable_kmer(input_text, input_k, input_profile)
    print(most_prob_kmer)
    
    # Output: CAATGTGCACGGGAA