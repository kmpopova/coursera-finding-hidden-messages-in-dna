"""
The first potential issue with implementing MedianString is writing a function to compute d(Pattern, Dna) = ∑ti=1 d(Pattern, Dnai), the sum of distances between Pattern and each string in Dna = {Dna1, ..., Dnat}. This task is achieved by the following pseudocode.

DistanceBetweenPatternAndStrings(Pattern, Dna)
    k ← |Pattern|
    distance ← 0
    for each string Text in Dna
        HammingDistance ← ∞
        for each k-mer Pattern’ in Text
            if HammingDistance > HammingDistance(Pattern, Pattern’)
                HammingDistance ← HammingDistance(Pattern, Pattern’)
        distance ← distance + HammingDistance
    return distance
Code Challenge: Implement DistanceBetweenPatternAndStrings.

Input: A string Pattern followed by a collection of space-separated strings Dna.
Output: d(Pattern, Dna).
"""
from helper_functions import hamming_distance, neighbors

def distance_between_pattern_and_strings(pattern: str, dna: list):
    k = len(pattern)
    distance = 0
    
    for string_text in dna:
        hamm_dist = float('inf')
        for i in range(len(string_text)-k+1):
            k_mer = string_text[i:i+k]
            if hamm_dist > hamming_distance(pattern, k_mer):
                hamm_dist = hamming_distance(pattern, k_mer)
        distance += hamm_dist
    
    return distance

def median_string(dna:list, k:int):
    distance = float('inf')
    median_str = ""
    patterns = neighbors("A"*k, k)
    for pattern in patterns:
        if distance > distance_between_pattern_and_strings(pattern, dna):
            distance = distance_between_pattern_and_strings(pattern, dna)
            median_str = pattern
    return median_str



if __name__ == "__main__":
    input_str = "TTCAACTCTGGCTTCACGTGTCTAGAGCCATACCGCATCCCCCGAGTTAGGTTTGTGATACGGGTCAGAACAGGGCACTAAAAGGGGCACG ACGAAGTGCTTTCCAGATAATTCGGTGCCCGCCGCCACGCATATAAACACGGGTGAAAAGCGCATAGATCGCACACGCCCGCCGCCAGTTT CTACGAGCCTACAAAATTATCTTTCATCGTTCCTGAGCGTTCCGCAGTTACCAGTTAGGTTGATCGACGTTTCACTGCAGAACCGACGAGT TAGAAGCACTCGAGTCCGTGGCGGGACTACGGCATGTGATACAGTAAACTCGCCGACACGTCACTCAAGGAGGAGAGAACGTGGTCTGCAC TGGTTTCCGGCCAGCATAAATGTCGATGCGATCCACAGAGCTAATTACTAGAAGGTCCCAGAGGGCGTCCTTGCCACCATTCAACTCAGAA CACCAGCCGTAGTAACACGTCTACACTACACAGAGCAGGCATTTCCAACGAGGCGCGTGAACCGCCCATACGTCTGGCTAAGCCGCACCTG ACGTTTCTCGATTGTAATAGCCAGTACTGCCAAGTTCCCGACAACAATGAAAACAGTCGCCGAGGCAACCGTTAGCCTATTATATTTCGTG GGTCAGTCAGTATAATCCAGTACGGTTTCTTCGCACGCGAAAATTCGACCTCAGTGTCTATAGTCTGCAAGGAGGTAAATTTGAGAGTTGC TGGAACAGTCGTGTGTCGGTCTAGCGATGTCTACCGGTCAAAGTTTTAGGCCGCGTGTACACGTTTGAAATGCGCGGGGTGCGACCGATGG CGTCTTAACGCTAGGAATTTTATCTGGCACGAGCAGCGATCTTGCGACTTGTAAACGCTACGAGTCACAGGCCCACTCCGACCTTTTCGCT CCTCATCTATTTAGTGACATACTGTTGATACGGGATACGGCGACCACATCGCGTTGGTGATGCCGAATATTCTTACCTGCTTTAATATAGT TATGATGGCGTTTCTTTGCACTAGTCCAAACTTAATCATCTAGTGGCGATTATGCCCCAGATTGCGCGCCGTCGCGAGTAGTTTGCATGTA CACATACTCGCTATGGCTCACACAGTAGATCGGAGCTCGTAATCCTGCCCTGCCTGGACTTCAGAGTTAATACACCCTTAGTCTTATTCCA TCCATAACTCATTAGTTCGACAAACGCGTTAGCCTTACGTGACTAAGGACGATTGTCCTCCAGTACAAAATTGGTCACGCCACGTGATAAC GAGCGGTGAATAGGCATGCCATATTACGTTGCCGCTTTCTATCGTCCACGTTCGGTACGCTCCGTGATATCAGGAGGGCGCGACGCTTTAC CTGGAACCTCTACTACACGAAGCGGGTCCGCTGCTTTCTTCTAATGATGGTACGCCGTGTGTAAATTGAACCGCGAGTGAGGGCCACTAAA ATAATGTGTCTATTGGATGGGACTTACTCTTGATAACGCTCCGCACGCAGATGCCTCAGATAAACGGGACTTAACGGGATCGACGGCAGAT CAGGTATACCACGCCTTGAGCCGGTCAGTGACTGTCTACGTACTGACAAAGAGGAGATACTATTGGGAACTAATGAAATTGCCTGTCCCAG TATAGAATACTCTTCGGCAGGTTTGAGCTAATCGAGAGGCCGCAGCTCTTCATTAGTCGTAATTTTGGATCCTGTTTGTGGCATGATTGAC GACTAGACCGTTCCTCGGCAAAATGCGTTAAGCGATCGTACTTACTCGCCATTCCAACTTACCGACATATAGAGATTTCGATTTTCCTTTG CCTCAGGCGCGGACCGTCTTTTCTCACCTATCCGAAATTATCCCCGAATGGGCCTGACGTAAATATATCAAAACGATTGAGGCAATAGTGC CTCGGTTCCGGCGCGATATCTCATGTGGTTGGAAGGTGGGAGAATCAGCCCAGTTTCGACAGCCAAAAAGTCAACTCTCAGACGTCGGAAG AGTCGATGACAACTGAGAGTACACGTAGATCGTTAATCGAGGCTCGCTGGGAGATGCAGCCGGGTCACTCGCGCCGATAAGTTTTTGGGAG GGTAGGATGAGGTTCAAGGTCGGGTGGGCCCCACAACTCCCTGATAGCCGCGTTTAGTGCAATTCATGGGGGGCCTCCAGTATTATATCCG ACCGTTCAATAACAGTATTTGGGCAACCCGCTTTCAGGGCGCTGACTCGAACGACGGTTCCTCTAAATTTATGATAACAAGCCTTGTAGGA GGGATTGTAAATAACCTGAAATCTAGGAATTCCCCATGAGTCGAACCCAACAGGTGAGATAGACGCCGGGGTATCAACTTTCGTCTTGCAC ATGTTATTCGAAGCGAACCGGATATAACCGATTTCGCAGGGGAGCCCGCTAAACAACTAGGTCGATAACTGTCCCAACGTAGTCCCCTCAA CGGGCATCCAAGATTCACTAACACCAGGCGTATGTTGTGGGAATCGATCTAGGGGTCGCACGTATAATGTTCCTGACTTACCTCGCCCTTA CGTGACTTGCAGGTCTGTACCTTACATGTGTAAGTCGTGGTCTCGAGTGATCTCTTTTAGAGTCTTAGCCTTACGGAACTCTGTTGCAGTC ACATGTGGATGCCCACCGCTACGTCGATAGCCGAGTCTAACTAAAGCGCGACTGCCTCTCCAGGGGGACCATATCTAAAGCTACCACGTCA TGTACCAGATCCCTGGCGGTAAAAAACGTACTTCTCACAATTTTCGAGCGTAAATTTTCTCCCTGGAGGTCAATTTTTCATGACGCACGTA CACCACTGTGCAATAACGCGCGTACAACTAAACGGTTGGCGTTGTCTTCTTAGGTGCGTCTAACTAACATAGCTTCCTAACCAGTGTAAGC GTAGCAAGCGTCGCCATGGTGGTGTCGATAGCGTCGTATCCGGTAAACGGACCTTTTAAAAGGGAAACCCATATCGCGCACCGACGGAAAA GGCGTACTGATGCACTCAGCGACATCCATTCTCCTTAGGACGATATTCCTTTCCGCGTTGATCGGAGAAAGCCATCTAGCAAACGATATTG AAGCCCATCTACCTGCTCCGTGTGTTAGGATTGTTGGCATCTCCGTCAGCTTTTTGGTCTGGGGAACGTCGATTTCCGTTTTCTACGGCGC CGTCAGTTAAGGTACGGCCCTTATAGCACTACGGAAATCTATAAAATTAATGGACAGGTTTCGTGGGATAGTTCACCCCGGACGTGAAATT TAGCAACCACACAACAAGTATACCATATATACGATGTGACTTTTTTCTGTCGCCAACATAGCTTTAGGCCCACCGGTGACTGATTGATGTT TATCCTAAAGTCATTTTGGGGTCATCGTCGGGGACTGCTACGTTCCGACAGATAGGGAACCCTTGCATTCGCAGAGACCAGACCATAGATT GGCTACAGGACATTTTCGAAACGGAGTGGATATCTGTCAGAGAAGTACAAAGCGGTACATGTCCGCTAATGCGTATCAGATTTTACCTGTG GTACTAGCAAGCGTTCCCTGCACGTAGTGCACACGATCGTGACAGCGACTGTTCGCATCTGACGGAGCACGGGTTCTTACCATCTTAGCCT"
    input_list = input_str.split(" ")
    output = distance_between_pattern_and_strings("TGGACC", input_list)
    print(output)
    
    input_str = "CTCGATGAGTAGGAAAGTAGTTTCACTGGGCGAACCACCCCGGCGCTAATCCTAGTGCCC GCAATCCTACCCGAGGCCACATATCAGTAGGAACTAGAACCACCACGGGTGGCTAGTTTC GGTGTTGAACCACGGGGTTAGTTTCATCTATTGTAGGAATCGGCTTCAAATCCTACACAG"
    input_list = input_str.split(" ")
    output = median_string(input_list, 7)
    print(output)
    
    
    